import construct
import debug
import sstable.string_encoded
import sstable.utils
import sstable.greedy_range
import sstable.type_parser
import sstable.dynamic_switch

construct.setGlobalPrintFullStrings(sstable.utils.PRINT_FULL_STRING)

# This is used in the version field of the frame header to indicate that the
# frame is a response.
RESPONSE_FLAG = 0b10000000


short_int = construct.Int16ub

string = construct.Struct(
    "length" / short_int,
    "string" / sstable.string_encoded.StringEncoded(construct.Bytes(construct.this.length), "utf-8"),
)
long_string = construct.Struct(
    "length" / construct.Int32ub,
    "string" / sstable.string_encoded.StringEncoded(construct.Bytes(construct.this.length), "utf-8"),
)

string_list = construct.Struct(
    "count" / short_int,
    "strings" / construct.Array(construct.this.count, long_string),
)

#  The first element of the body of a RESULT message is an [int] representing the
#  `kind` of result. The rest of the body depends on the kind. The kind can be
#  one of:
#    0x0001    Void: for results carrying no information.
#    0x0002    Rows: for results to select queries, returning a set of rows.
#    0x0003    Set_keyspace: the result to a `use` query.
#    0x0004    Prepared: result to a PREPARE message.
#    0x0005    Schema_change: the result to a schema altering query.
class ResultKind:
    VOID          = 0x0001
    ROWS          = 0x0002
    SET_KEYSPACE  = 0x0003
    PREPARED      = 0x0004
    SCHEMA_CHANGE = 0x0005

result_void = construct.Struct(
    #"kind" / construct.Int32ub,
    "body" / construct.Bytes(0),
)

#  Indicates a set of rows. The rest of the body of a Rows result is:
#    <metadata><rows_count><rows_content>
#  where:
#    - <metadata> is composed of:
#        <flags><columns_count>[<paging_state>][<global_table_spec>?<col_spec_1>...<col_spec_n>]
#      where:
#        - <flags> is an [int]. The bits of <flags> provides information on the
#          formatting of the remaining information. A flag is set if the bit
#          corresponding to its `mask` is set. Supported flags are, given their
#          mask:
#            0x0001    Global_tables_spec: if set, only one table spec (keyspace
#                      and table name) is provided as <global_table_spec>. If not
#                      set, <global_table_spec> is not present.
#            0x0002    Has_more_pages: indicates whether this is not the last
#                      page of results and more should be retrieved. If set, the
#                      <paging_state> will be present. The <paging_state> is a
#                      [bytes] value that should be used in QUERY/EXECUTE to
#                      continue paging and retrieve the remainder of the result for
#                      this query (See Section 8 for more details).
#            0x0004    No_metadata: if set, the <metadata> is only composed of
#                      these <flags>, the <column_count> and optionally the
#                      <paging_state> (depending on the Has_more_pages flag) but
#                      no other information (so no <global_table_spec> nor <col_spec_i>).
#                      This will only ever be the case if this was requested
#                      during the query (see QUERY and RESULT messages).
#        - <columns_count> is an [int] representing the number of columns selected
#          by the query that produced this result. It defines the number of <col_spec_i>
#          elements in and the number of elements for each row in <rows_content>.
#        - <global_table_spec> is present if the Global_tables_spec is set in
#          <flags>. It is composed of two [string] representing the
#          (unique) keyspace name and table name the columns belong to.
#        - <col_spec_i> specifies the columns returned in the query. There are
#          <column_count> such column specifications that are composed of:
#            (<ksname><tablename>)?<name><type>
#          The initial <ksname> and <tablename> are two [string] and are only present
#          if the Global_tables_spec flag is not set. The <column_name> is a
#          [string] and <type> is an [option] that corresponds to the description
#          (what this description is depends a bit on the context: in results to
#          selects, this will be either the user chosen alias or the selection used
#          (often a colum name, but it can be a function call too). In results to
#          a PREPARE, this will be either the name of the corresponding bind variable
#          or the column name for the variable if it is "anonymous") and type of
#          the corresponding result. The option for <type> is either a native
#          type (see below), in which case the option has no value, or a
#          'custom' type, in which case the value is a [string] representing
#          the fully qualified class name of the type represented. Valid option
#          ids are:
#            0x0000    Custom: the value is a [string], see above.
#            0x0001    Ascii
#            0x0002    Bigint
#            0x0003    Blob
#            0x0004    Boolean
#            0x0005    Counter
#            0x0006    Decimal
#            0x0007    Double
#            0x0008    Float
#            0x0009    Int
#            0x000B    Timestamp
#            0x000C    Uuid
#            0x000D    Varchar
#            0x000E    Varint
#            0x000F    Timeuuid
#            0x0010    Inet
#            0x0011    Date
#            0x0012    Time
#            0x0013    Smallint
#            0x0014    Tinyint
#            0x0020    List: the value is an [option], representing the type
#                            of the elements of the list.
#            0x0021    Map: the value is two [option], representing the types of the
#                           keys and values of the map
#            0x0022    Set: the value is an [option], representing the type
#                            of the elements of the set
#            0x0030    UDT: the value is <ks><udt_name><n><name_1><type_1>...<name_n><type_n>
#                           where:
#                              - <ks> is a [string] representing the keyspace name this
#                                UDT is part of.
#                              - <udt_name> is a [string] representing the UDT name.
#                              - <n> is a [short] representing the number of fields of
#                                the UDT, and thus the number of <name_i><type_i> pairs
#                                following
#                              - <name_i> is a [string] representing the name of the
#                                i_th field of the UDT.
#                              - <type_i> is an [option] representing the type of the
#                                i_th field of the UDT.
#            0x0031    Tuple: the value is <n><type_1>...<type_n> where <n> is a [short]
#                             representing the number of values in the type, and <type_i>
#                             are [option] representing the type of the i_th component
#                             of the tuple
#
#    - <rows_count> is an [int] representing the number of rows present in this
#      result. Those rows are serialized in the <rows_content> part.
#    - <rows_content> is composed of <row_1>...<row_m> where m is <rows_count>.
#      Each <row_i> is composed of <value_1>...<value_n> where n is
#      <columns_count> and where <value_j> is a [bytes] representing the value
#      returned for the jth column of the ith row. In other words, <rows_content>
#      is composed of (<rows_count> * <columns_count>) [bytes].
class ResultRowsFlags:
    GLOBAL_TABLES_SPEC = 0x0001
    HAS_MORE_PAGES     = 0x0002
    NO_METADATA        = 0x0004

option = construct.Struct(
    "id" / construct.Int16ub,
    # The reason we use dynamic_switch here instead of the standard Switch is
    # that this is a recursive struct, eg option is used for the type of
    # list, sets, etc.
    "value" / sstable.dynamic_switch.DynamicSwitch(
        lambda ctx: ctx.id,
        lambda id: {
            0x0000: string,
            0x0001: construct.Bytes(0), # ascii
            0x0002: construct.Bytes(0), # bigint
            0x0003: construct.Bytes(0), # blob
            0x0004: construct.Bytes(0), # boolean
            0x0005: construct.Bytes(0), # counter
            0x0006: construct.Bytes(0), # decimal
            0x0007: construct.Bytes(0), # double
            0x0008: construct.Bytes(0), # float
            0x0009: construct.Bytes(0), # int
            0x000B: construct.Bytes(0), # timestamp
            0x000C: construct.Bytes(0), # uuid
            0x000D: construct.Bytes(0), # varchar
            0x000E: construct.Bytes(0), # varint
            0x000F: construct.Bytes(0), # timeuuid
            0x0010: construct.Bytes(0), # inet
            0x0011: construct.Bytes(0), # date
            0x0012: construct.Bytes(0), # time
            0x0013: construct.Bytes(0), # smallint
            0x0014: construct.Bytes(0), # tinyint
            0x0020: option, # list
            0x0021: construct.Struct( # map
                "key" / option,
                "value" / option,
            ),
            0x0022: option, # set
            # TODO: 0x0030: construct.Bytes(0), # udt
            # TODO:  0x0031: construct.Bytes(0), # tuple
        }[id],
    ),
)

result_rows = construct.Struct(
    "metadata" / construct.Struct(
        "flags" / construct.Int32ub,
        "columns_count" / construct.Int32ub,
        "paging_state" / construct.If(lambda ctx: ctx.flags & ResultRowsFlags.HAS_MORE_PAGES, long_string),
        "global_table_spec" / construct.If(lambda ctx: (ctx.flags & ResultRowsFlags.GLOBAL_TABLES_SPEC) and (not ctx.flags & ResultRowsFlags.NO_METADATA), construct.Struct(
            "keyspace" / string,
            "table" / string,
        )),
        "column_specs" / construct.If(lambda ctx: not ctx.flags & ResultRowsFlags.NO_METADATA,
            construct.Array(construct.this.columns_count, construct.Struct(
                "keyspace" / construct.If(lambda ctx: not ctx._.flags & ResultRowsFlags.GLOBAL_TABLES_SPEC, string),
                "table" / construct.If(lambda ctx: not ctx._.flags & ResultRowsFlags.GLOBAL_TABLES_SPEC, string),
                "name" / string,
                "type" / option,
            ),
        )),
    ),
    "rows_count" / construct.Int32ub,
    "rows_content" / construct.Array(construct.this.rows_count, construct.Struct(
        "row" / construct.Array(construct.this._.metadata.columns_count, construct.Struct(
            "column_length" / construct.Int32sb,
            "column_value" / construct.If(lambda ctx: ctx.column_length>0, construct.Bytes(construct.this.column_length)),
        )),
    )),
)

class FrameFlags:
    COMPRESSION_FLAG = 0x01
    TRACING_FLAG     = 0x02
    CUSTOM_PAYLOAD   = 0x04
    WARNING_FLAG     = 0x08

class ErrorCode:
    SERVER_ERROR     = 0x0000
    PROTOCOL_ERROR   = 0x000A
    AUTH_ERROR       = 0x0100
    UNAVAILABLE      = 0x1000
    OVERLOADED       = 0x1001
    IS_BOOTSTRAPPING = 0x1002
    TRUNCATE_ERROR   = 0x1003
    WRITE_TIMEOUT    = 0x1100
    READ_TIMEOUT     = 0x1200
    READ_FAILURE     = 0x1300
    FUNCTION_FAILURE = 0x1400
    WRITE_FAILURE    = 0x1500
    SYNTAX_ERROR     = 0x2000
    UNAUTHORIZED     = 0x2100
    INVALID          = 0x2200
    CONFIG_ERROR     = 0x2300
    ALREADY_EXISTS   = 0x2400
    UNPREPARED       = 0x2500


# Opcode is an integer byte that distinguishes the actual message:
# https://github.com/apache/cassandra/blob/trunk/doc/native_protocol_v5.spec#L342-L358
class OpCode:
    ERROR          = 0x00
    STARTUP        = 0x01
    READY          = 0x02
    AUTHENTICATE   = 0x03
    OPTIONS        = 0x05
    SUPPORTED      = 0x06
    QUERY          = 0x07
    RESULT         = 0x08
    PREPARE        = 0x09
    EXECUTE        = 0x0A
    REGISTER       = 0x0B
    EVENT          = 0x0C
    BATCH          = 0x0D
    AUTH_CHALLENGE = 0x0E
    AUTH_RESPONSE  = 0x0F
    AUTH_SUCCESS   = 0x10

error = construct.Struct(
    "code" / construct.Int32ub,
    "length" / short_int,
    "message" / sstable.string_encoded.StringEncoded(construct.Bytes(construct.this.length), "utf-8"),
)
result = construct.Struct(
    "kind" / construct.Int32ub,
    "result" / construct.Switch(construct.this.kind, {
        ResultKind.VOID: construct.Bytes(0),
        ResultKind.ROWS: result_rows,
    }),
)

# https://github.com/apache/cassandra/blob/trunk/doc/native_protocol_v4.spec#L66
query = construct.Struct(
    "query" / long_string,
    "consistency" / short_int,
    "flags" / construct.Byte,
    # TODO: the rest of the body depends on the flags
)

frame = construct.Struct(
    # Version is not well documented in the protocol unfortunately.
    # The new client sends version 66 (MAX_SUPPORTED) with OpCodes.OPTIONS as the first every request sent by the client.
    # Sources:
    #   https://docs.datastax.com/en/developer/python-driver/3.29/api/cassandra/cluster/#:~:text=protocol_version%20%3D%2066
    #   https://docs.datastax.com/en/developer/python-driver/3.29/api/cassandra/#cassandra.ProtocolVersion:~:text=by%20this%20driver.-,MAX_SUPPORTED%20%3D%2066,-Maximum%20protocol%20version
    "version" / construct.Hex(construct.Byte),
    "flags" / construct.Hex(construct.Byte),
    "stream" / construct.Int16ub,
    "opcode" / construct.Hex(construct.Byte),
    "length" / construct.Int32ub,
    "body" / construct.Switch(construct.this.opcode, {
        OpCode.ERROR: error,
        OpCode.QUERY: query,
        OpCode.RESULT: result,
    }),
)

string_list = construct.Struct(
    "count" / short_int,
    "strings" / construct.Array(construct.this.count, construct.Struct(
        "length" / short_int,
        "string" / sstable.string_encoded.StringEncoded(construct.Bytes(construct.this.length), "utf-8"),
    )),
)

string_map = construct.Struct(
    "count" / short_int,
    "keyvals" / construct.Array(construct.this.count, construct.Struct(
        "key_length" / short_int,
        "key" / sstable.string_encoded.StringEncoded(construct.Bytes(construct.this.key_length), "utf-8"),
        "val_length" / short_int,
        "val" / sstable.string_encoded.StringEncoded(construct.Bytes(construct.this.val_length), "utf-8"),
    )),
)

string_multimap = construct.Struct(
    "count" / short_int,
    "keyvals" / construct.Array(construct.this.count, construct.Struct(
        "length" / short_int,
        "key" / sstable.string_encoded.StringEncoded(construct.Bytes(construct.this.length), "utf-8"),
        "values" / string_list,
    )),
)

string_multimap_example = {
    "bytes": b'\x00\x01'
           + b'\x00\x04' + b'key1'
           + b'\x00\x02'
           + b'\x00\x06value1'
           + b'\x00\x06value2',
    "obj": {
        "count": 1,
        "keyvals": [
            {
                "length": 4,
                "key": "key1",
                "values": {
                    "count": 2,
                    "strings": [
                        {
                            "length": 6,
                            "string": "value1",
                        },
                        {
                            "length": 6,
                            "string": "value2",
                        },
                    ],
                },
            },
        ],
    },
}
sstable.utils.assert_equal(string_multimap_example["bytes"], string_multimap.build(string_multimap_example["obj"]))

error_example = {
    "bytes": b"\x00\x00\x00\x0A"  # code
           + b"\x00\x05" # length
           + b"hello", # message
    "obj": {
        "code": ErrorCode.PROTOCOL_ERROR,
        "length": 5,
        "message": "hello",
    },
}
sstable.utils.assert_equal(error_example["bytes"], error.build(error_example["obj"]))

frame_example = {
    "bytes": b"\x84" # version
           + b"\x00" # flags
           + b"\x00\x00" # stream
           + b"\x00" # opcode
           + len(error_example["bytes"]).to_bytes(4, byteorder='big')
           + error_example["bytes"],
    "obj": {
        "version": 0x04 | RESPONSE_FLAG,
        "flags": 0x00,
        "stream": 0x0000,
        "opcode": OpCode.ERROR,
        "length": len(error_example["bytes"]),
        "body": error_example["obj"],
    },
}
sstable.utils.assert_equal(frame_example["bytes"], frame.build(frame_example["obj"]))

invalid_query_reponse_example = frame.parse(sstable.utils.hexstring_to_bytes("""
    # original: 84000003000000002100002200001b756e636f6e66696775726564207461626c652070656572735f7632
    84 # version
    00 # flags
    0003 # stream
    00 # opcode
    # body:
    00 00 00 21 # length
    00 00 22 00 # code = Invalid: The query is syntactically correct but invalid
    00 1b # message length
    756e636f6e66696775726564207461626c652070656572735f7632 # = "unconfigured table peers_v2"
"""))
sstable.utils.assert_equal("unconfigured table peers_v2", invalid_query_reponse_example.body.message)

query_example = frame.parse(sstable.utils.hexstring_to_bytes("""
    # 0400000407000000330000002c53454c454354202a2046524f4d2073797374656d2e6c6f63616c205748455245206b65793d276c6f63616c27000100
    04000004 07 000000330000002c53454c454354202a2046524f4d2073797374656d2e6c6f63616c205748455245206b65793d276c6f63616c27000100
"""))
sstable.utils.assert_equal("SELECT * FROM system.local WHERE key='local'", query_example.body.query.string)
sstable.utils.assert_equal(1, query_example.body.consistency)
sstable.utils.assert_equal(0, query_example.body.flags)

got_example = frame.parse(sstable.utils.hexstring_to_bytes("""
    # 
    84 # version
    00 # flags
    0004 # stream
    08 # opcode
    000019
    
"""))
sstable.utils.assert_equal(0x84, got_example.version)
sstable.utils.assert_equal(2, got_example.body.kind)
sstable.utils.assert_equal(1, got_example.body.result.metadata.flags)
sstable.utils.assert_equal(18, got_example.body.result.metadata.columns_count)
sstable.utils.assert_equal("system", got_example.body.result.metadata.global_table_spec.keyspace.string)
sstable.utils.assert_equal("local", got_example.body.result.metadata.global_table_spec.table.string)
sstable.utils.assert_equal("key", got_example.body.result.metadata.column_specs[0].name.string)
sstable.utils.assert_equal(13, got_example.body.result.metadata.column_specs[0].type.id)
# eventually these should be strings, not byte arrays:
sstable.utils.assert_equal(b"COMPLETED", got_example.body.result.rows_content[0].row[1].column_value)
sstable.utils.assert_equal(b"3.4.0", got_example.body.result.rows_content[0].row[4].column_value)
sstable.utils.assert_equal(b"datacenter1", got_example.body.result.rows_content[0].row[5].column_value)
